<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">

	<flow name="schedulerFlow"
		doc:id="aff4106d-d2f6-4366-940a-a380dcb1cf73">
		<scheduler doc:name="Scheduler"
			doc:id="58b7c776-fbee-4753-9bea-f6cc3e037efd">
			<scheduling-strategy>
				<fixed-frequency frequency="${scheduler.frequency}"
					startDelay="${scheduler.startDelay}" timeUnit="SECONDS" />
			</scheduling-strategy>
		</scheduler>
		<flow-ref doc:name="initialization-values-flow"
			doc:id="b735433c-9f7f-4599-b1b6-0b794b893666"
			name="initialization-values-flow" target="vInitialized" />
		<os:retrieve key="syncState"
			doc:name="Retrieve sync state" objectStore="SchedulerStatus"
			target="syncState">
			<os:default-value><![CDATA[fromFox]]></os:default-value>

		</os:retrieve>
		<choice doc:name="SyncState?"
			doc:id="b4703d83-780b-4e2d-bf5d-51b1566d66e2">
			<when expression="#[vars.syncState == 'fromFox']">
				<logger level="INFO" doc:name="LOG running from fox"
					doc:id="d3619f57-3984-49cf-b45c-a9b36047d05d"
					message="running from Fox" />
				<os:store key="syncState"
					doc:name="Set sync state to running"
					doc:id="604c37b2-002b-4768-9407-466ac5183c60"
					objectStore="SchedulerStatus">
					<os:value><![CDATA[running]]></os:value>
				</os:store>
				<flow-ref doc:name="sf-sfdc-query-flow-fox"
					doc:id="79292a4f-778d-403a-8f8c-df766d5d42e6"
					name="sf-sfdc-query-flow-fox" />
				<flow-ref doc:name="sf-from-fox-to-new"
					doc:id="6d87be17-152d-44c9-90ff-a80b0008d93f"
					name="sf-from-fox-to-new" />

				<os:store doc:name="set-sync-state-to-from-new"
					doc:id="d2514c12-1e27-4f61-a4b8-ae438eb84545" key="syncState"
					objectStore="SchedulerStatus">
					<os:value><![CDATA[fromNew]]></os:value>
				</os:store>
			</when>
			<when expression="#[vars.syncState == 'fromNew']">
				<logger level="INFO" doc:name="LOG running from New"
					doc:id="d8b84a80-a7ae-4f3e-aafe-1ac5a4f71e7c"
					message="running from New" />
				<os:store key="syncState"
					doc:name="Set sync state to running"
					doc:id="2ed014a1-a76d-48d0-8a6b-32d753b96500"
					objectStore="SchedulerStatus">
					<os:value><![CDATA[running]]></os:value>
				</os:store>
				<flow-ref doc:name="sf-sfdc-query-flow-new"
					doc:id="c2ebe0d5-29f0-4c85-8ac5-9a2ef9948950"
					name="sf-sfdc-query-flow-new" />
				<flow-ref doc:name="sf-from-new-to-fox"
					doc:id="f2f219ed-b182-4c59-be37-24188b2cf9c6"
					name="sf-from-new-to-fox" />

				<os:store doc:name="set-sync-state-to-from-fox"
					doc:id="24048aea-fe6b-49b9-b7d7-580c81fa6c26" key="syncState"
					objectStore="SchedulerStatus">
					<os:value><![CDATA[fromFox]]></os:value>
				</os:store>
			</when>
			<otherwise>
				<logger level="INFO" doc:name="LOG batch running"
					doc:id="bf955eec-4baf-4836-b7fd-7d77ff5ebcb1"
					message="Batch running" />
			</otherwise>
		</choice>
		<error-handler>
			<on-error-propagate enableNotifications="true"
				logException="true" doc:name="On Error Propagate"
				doc:id="488b507d-e26c-4c56-8759-8bb4f6645d71" type="ANY">
				<flow-ref doc:name="errorHandlingFlow"
					doc:id="afdaf73c-0137-4d60-84f6-5c41234771a3"
					name="errorHandlingFlow" />
			</on-error-propagate>
		</error-handler>
	</flow>

	<flow name="sf-sfdc-query-flow-fox">
		<os:retrieve key="watermark"
			objectStore="watermarkStoreFox" target="lastQueryDateA"
			doc:name="Retrieve lastQueryDateFox">
			<os:default-value><![CDATA[#[p('watermark.default.expression') as String]]]></os:default-value>
		</os:retrieve>
		<salesforce:query
			doc:name="Query Contact with filtering criteria from Salesforce Fox Org"
			config-ref="Salesforce_Sfdc_fox_org_config">
			<salesforce:salesforce-query><![CDATA[Select OwnerId, Birthdate, CreatedById, FirstName, LastName, Email, Phone, LastModifiedById, MobilePhone, Division_Code__c, Team__c, 
Last_date_of_contact__c, Credentialing_Status__c, Primary_Specialty__c, NPI_Number__c, Degree__c, 
Has_Adverse_History__c, LastModifiedDate, Preferences_History__c 
from Contact WHERE RecordTypeId = ':providerId' AND LastModifiedDate > :lastModifiedDate 
AND LastModifiedById != '${salesforce.fox.userId}' ]]></salesforce:salesforce-query>
			<salesforce:parameters><![CDATA[#[output application/java
---
{
	"lastModifiedDate" : vars.lastQueryDateA,
	"providerId" : vars.vInitialized.recordType.providerId
}]]]></salesforce:parameters>
		</salesforce:query>
		<logger level="INFO" doc:name="Logger"
			doc:id="16f60841-9411-4600-875a-53beb1ad1c53" message="#[payload]" />
		<os:store key="watermark" failOnNullValue="false"
			objectStore="watermarkStoreFox" doc:name="Store lastQueryDateFox">
			<os:value><![CDATA[#[if (sizeOf(payload) != 0) (max(payload map $.LastModifiedDate) as String) else vars.lastQueryDateA]]]></os:value>
		</os:store>
		<error-handler>
			<on-error-continue enableNotifications="true"
				logException="true" doc:name="On Error Continue"
				doc:id="b3eff7a8-fd88-4b2e-9c60-702403b9a5e8">
				<os:store doc:name="Set sync state to fromFox"
					doc:id="f3b320bb-2e86-457a-82ee-120c22489fce" key="syncState"
					objectStore="SchedulerStatus">
					<os:value><![CDATA[fromFox]]></os:value>
				</os:store>
			</on-error-continue>
		</error-handler>
	</flow>
	<flow name="sf-sfdc-query-flow-new">
		<os:retrieve key="watermark"
			objectStore="watermarkStoreNew" target="lastQueryDateB"
			doc:name="Retrieve lastQueryDateNew">
			<os:default-value><![CDATA[#[p('watermark.default.expression') as String]]]></os:default-value>
		</os:retrieve>
		<salesforce:query
			doc:name="Query Account with filtering criteria from Salesforce New Org"
			config-ref="Salesforce_Sfdc_new_org_config">
			<salesforce:salesforce-query><![CDATA[SELECT OwnerId, RecordTypeId, FirstName, LastName, CreatedById, PersonEmail, LastModifiedById, PersonLastCURequestDate, 
LastModifiedDate, PersonBirthdate, PersonLastCUUpdateDate, PersonMailingAddress, PersonMobilePhone, Division__c, NPI__c, 
Last_Two_way_Contact__c, Team__c, Credentialing_Status__c, Degree__c  
FROM Account WHERE RecordTypeId = ':personId' AND LastModifiedDate > :lastModifiedDate 
AND LastModifiedById != '${salesforce.new.userId}'
]]></salesforce:salesforce-query>
			<salesforce:parameters><![CDATA[#[output application/java
---
{
	"lastModifiedDate" : vars.lastQueryDateB,
	"personId" : vars.vInitialized.recordType.personId
}]]]></salesforce:parameters>
		</salesforce:query>
		<logger level="INFO" doc:name="Logger"
			doc:id="6afbdd3e-a336-4723-806c-c837e709ccd0" message="#[payload]" />
		<os:store key="watermark" doc:name="Store lastQueryDateNew"
			doc:id="b995ea0e-c89f-40ac-9f6e-0e06096f5abc"
			objectStore="watermarkStoreNew">
			<os:value><![CDATA[#[if (sizeOf(payload) != 0) (max(payload map $.LastModifiedDate) as String) else vars.lastQueryDateB]]]></os:value>
		</os:store>
		<error-handler>
			<on-error-continue enableNotifications="true"
				logException="true" doc:name="On Error Continue"
				doc:id="7871de9e-a21a-415a-8366-eae8b679dca7">
				<os:store doc:name="Set sync state to fromNew"
					doc:id="a6ceb2fe-8b25-453b-8409-cc935945061e" key="syncState"
					objectStore="SchedulerStatus">
					<os:value><![CDATA[fromNew]]></os:value>
				</os:store>
			</on-error-continue>
		</error-handler>

	</flow>

</mule>
